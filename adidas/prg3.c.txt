#include <stdio.h>
#include <limits.h> // For INT_MAX

#define INF INT_MAX
#define MAX 10

int min(int a, int b) 
{
    return (a < b) ? a : b;
}

void floyd(int p[MAX][MAX], int n) 
{
    int i, j, k;
    for (k = 0; k < n; k++) // Use 0-based indexing
    {
        for (i = 0; i < n; i++)
        {
            for (j = 0; j < n; j++)
            {
                if (p[i][k] != INF && p[k][j] != INF)
                {
                    p[i][j] = min(p[i][j], p[i][k] + p[k][j]);
                }
            }
        }
    }
}

int main() 
{
    int a[MAX][MAX], n, i, j;

    printf("\nEnter the number of nodes (n): ");
    scanf("%d", &n);

    printf("\nEnter the graph data (use 999 for INF):\n");
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            scanf("%d", &a[i][j]);
            if (a[i][j] == 999)
            {
                a[i][j] = INF; // Handle INF values
            }
        }
    }

    floyd(a, n);

    printf("\nShortest path matrix:\n");
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            if (a[i][j] == INF)
                printf("INF ");
            else
                printf("%d ", a[i][j]);
        }
        printf("\n");
    }

    return 0;
}




#include <stdio.h>

#define MAX 10

void warshall(int p[MAX][MAX], int n) 
{
    int i, j, k;
    for (k = 0; k < n; k++) // Use 0-based indexing
    {
        for (i = 0; i < n; i++)
        {
            for (j = 0; j < n; j++)
            {
                if (p[i][k] && p[k][j])
                {
                    p[i][j] = 1;
                }
            }
        }
    }
}

int main() 
{
    int a[MAX][MAX], n, i, j;

    printf("\nEnter the number of nodes (n): ");
    scanf("%d", &n);

    printf("\nEnter the graph data (use 0 and 1 for adjacency matrix):\n");
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            scanf("%d", &a[i][j]);
        }
    }

    warshall(a, n);

    printf("\nResultant path matrix:\n");
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            printf("%d ", a[i][j]);
        }
        printf("\n");
    }

    return 0;
}




