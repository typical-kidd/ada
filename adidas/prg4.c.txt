#include <stdio.h>
#include <limits.h> // For INT_MAX

#define INF INT_MAX
#define MAX 10

void dijkstra(int c[MAX][MAX], int n, int s, int d[MAX]) 
{
    int v[MAX], min, u, i, j;

    // Initialize distance array and visited array
    for (i = 0; i < n; i++) 
    {
        d[i] = c[s][i];
        v[i] = 0;
    }
    v[s] = 1;

    for (i = 0; i < n - 1; i++) 
    {
        min = INF;
        for (j = 0; j < n; j++) 
        {
            if (v[j] == 0 && d[j] < min) 
            {
                min = d[j];
                u = j;
            }
        }

        v[u] = 1;

        for (j = 0; j < n; j++) 
        {
            if (v[j] == 0 && (d[u] + c[u][j]) < d[j]) 
            {
                d[j] = d[u] + c[u][j];
            }
        }
    }
}

int main() 
{
    int c[MAX][MAX], d[MAX], i, j, s, n;

    printf("Enter the number of nodes (n): ");
    scanf("%d", &n);

    printf("Enter the graph data (use %d for INF):\n", INF);
    for (i = 0; i < n; i++) 
    {
        for (j = 0; j < n; j++) 
        {
            scanf("%d", &c[i][j]);
            if (c[i][j] == 999) // Assuming 999 is used to represent INF
            {
                c[i][j] = INF;
            }
        }
    }

    printf("Enter the source node (0-based index): ");
    scanf("%d", &s);

    dijkstra(c, n, s, d);

    for (i = 0; i < n; i++) 
    {
        if (d[i] == INF)
            printf("Shortest distance from %d to %d is INF\n", s, i);
        else
            printf("Shortest distance from %d to %d is %d\n", s, i, d[i]);
    }

    return 0;
}
